Versioning rules:

Consumer: Ignore reserved fields. Later versions may give those fields meaning, but as long as they remain zero the meaning will not change compared to when they were reserved. Earlier versions may define fewer fields, but by the same logic the producer must have set them to zero so the meaning is the same in old versions as for the current version. Later versions may add items to a union, but existing items will not change meaning or be removed. It's safe to interpret a file according to a different version than specified, as long as all fields defined only by the newer version are zero, but you must check.

Producer: Set reserved fields to zero.

Spec: It's okay to change the meaning of existing fields when a new field is nonzero, but the meaning must remain the same as before when all new fields are zero.

All fields and values named `_` are reserved.

#00 magic : uuid  % dc867b72-87f7-47da-a770-752af3299a3c

#10 version : u8 = 0  % 0 = unspecified, local use only
#11 _ : array[3] of u8

% these offsets are from start of file
#14 load-address-offset : u32
#18 code-and-data-offset : u32
#1C string-table-offset : u32
#20 symbol-table-offset : u32
#24 relocation-table-offset : u32

#28 arch : union[u16]
    0 none
    1 risc-v : struct
        _ : array[6] of u8  % reserved (TODO: RISC-V extensions?)
    end
    #FFFF _
end

load-address : array[Nil] of u8  % little-endian, like everything else

% u32-aligned
code-and-data : array[Nil] of u8

% u32-aligned
% first string (index 0) contains arch-specific info as a string (or whatever, i guess it doesn't matter). symbols can't reference it (in their case 0 means unused symbol table entry).
string-table : chain of string[u32]

% u32-aligned
symbol-table : array[Nil] of struct
    name-string-offset : u32  % 0 means this symbol table entry is unused
    _  : array[2] of u8
    value : union[u8]
        0 metadata : structs
            _ : u8
            value-string-offset : u32
            _ : u32
        end
        % TODO: why does distinction between code and data symbols matter?
        1 code : struct
            flags : bitmap[u8]
                0 external : bool
                1 defined : bool
            end
            type-string-offset : u32
            offset : u32
        end
        2 data : struct
            flags : bitmap[u8]
                0 external : bool
                1 defined : bool
            end
            type-string-offset : u32
            offset : u32
        end
    end
end

relocation-table : array[Nil] of struct
    offset : u32
    symbol-index : u32
    kind : union[u16]
        0 unused  % meaning this relocation table entry is unused
        1 rel-code-b-type : struct
            _ : u16
        end
        2 rel-code-j-type : struct
            _ : u16
        end
        3 rel-u-type : struct
            _ : u16
        end
    end
    _ : u32
end
